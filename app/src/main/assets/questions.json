{
    "easy": [
  { "question": "What is the time complexity of accessing an element in an array?", "options": ["O(1)", "O(n)", "O(log n)", "O(n^2)"], "answer": "O(1)" },
  { "question": "Which data structure follows the Last In First Out (LIFO) principle?", "options": ["Queue", "Stack", "Array", "Linked List"], "answer": "Stack" },
  { "question": "Which of the following is a linear data structure?", "options": ["Graph", "Tree", "Array", "Heap"], "answer": "Array" },
  { "question": "What is the worst-case time complexity of binary search?", "options": ["O(n)", "O(log n)", "O(n^2)", "O(1)"], "answer": "O(log n)" },
  { "question": "Which sorting algorithm has an average-case complexity of O(n log n)?", "options": ["Bubble Sort", "Insertion Sort", "Merge Sort", "Selection Sort"], "answer": "Merge Sort" },
  { "question": "What data structure is used in Breadth-First Search (BFS)?", "options": ["Stack", "Queue", "Heap", "Tree"], "answer": "Queue" },
  { "question": "Which data structure uses pointers to link elements together?", "options": ["Array", "Linked List", "Stack", "Queue"], "answer": "Linked List" },
  { "question": "What is the default data structure used in recursion?", "options": ["Queue", "Heap", "Stack", "Array"], "answer": "Stack" },
  { "question": "Which sorting algorithm works by repeatedly swapping adjacent elements?", "options": ["Quick Sort", "Merge Sort", "Bubble Sort", "Heap Sort"], "answer": "Bubble Sort" },
  { "question": "Which data structure follows the First In First Out (FIFO) principle?", "options": ["Stack", "Queue", "Heap", "Graph"], "answer": "Queue" },
  { "question": "Which algorithm is used to find the shortest path in an unweighted graph?", "options": ["DFS", "Dijkstra’s Algorithm", "BFS", "Bellman-Ford"], "answer": "BFS" },
  { "question": "What is the worst-case time complexity of Quick Sort?", "options": ["O(n log n)", "O(n)", "O(n^2)", "O(log n)"], "answer": "O(n^2)" },
  { "question": "Which data structure is used to implement recursion?", "options": ["Queue", "Stack", "Heap", "Graph"], "answer": "Stack" },
  { "question": "Which of the following is not a dynamic data structure?", "options": ["Array", "Linked List", "Stack", "Queue"], "answer": "Array" },
  { "question": "What is the time complexity of inserting an element in an unsorted array?", "options": ["O(1)", "O(n)", "O(log n)", "O(n^2)"], "answer": "O(1)" },
  { "question": "Which data structure is used in Depth-First Search (DFS)?", "options": ["Queue", "Stack", "Heap", "Graph"], "answer": "Stack" },
  { "question": "Which of the following is an in-place sorting algorithm?", "options": ["Merge Sort", "Quick Sort", "Radix Sort", "Counting Sort"], "answer": "Quick Sort" },
  { "question": "What is the time complexity of inserting a node at the beginning of a linked list?", "options": ["O(1)", "O(n)", "O(log n)", "O(n^2)"], "answer": "O(1)" },
  { "question": "Which searching algorithm is used in a balanced binary search tree?", "options": ["Linear Search", "Binary Search", "Breadth-First Search", "Depth-First Search"], "answer": "Binary Search" },
  { "question": "Which of the following sorting algorithms is the fastest for a nearly sorted array?", "options": ["Bubble Sort", "Insertion Sort", "Selection Sort", "Merge Sort"], "answer": "Insertion Sort" },
  { "question": "Which data structure is used in implementing LRU cache?", "options": ["Queue", "Linked List", "Hash Map", "Heap"], "answer": "Linked List" },
  { "question": "Which of the following is true about doubly linked lists?", "options": ["Each node has one pointer", "They use less memory than singly linked lists", "They allow traversal in both directions", "They cannot store duplicate values"], "answer": "They allow traversal in both directions" },
  { "question": "Which of the following operations is the most time-consuming in a balanced BST?", "options": ["Insertion", "Deletion", "Search", "All take the same time"], "answer": "All take the same time" },
  { "question": "Which sorting algorithm uses a pivot element?", "options": ["Bubble Sort", "Quick Sort", "Merge Sort", "Heap Sort"], "answer": "Quick Sort" },
  { "question": "Which data structure is commonly used in undo features?", "options": ["Queue", "Stack", "Heap", "Graph"], "answer": "Stack" },
  { "question": "What is the best-case time complexity of Bubble Sort?", "options": ["O(n log n)", "O(n)", "O(n^2)", "O(1)"], "answer": "O(n)" },
  { "question": "Which of the following searching techniques does not require a sorted array?", "options": ["Binary Search", "Jump Search", "Interpolation Search", "Linear Search"], "answer": "Linear Search" },
  { "question": "Which of the following data structures is used for memory management in operating systems?", "options": ["Graph", "Queue", "Linked List", "Heap"], "answer": "Heap" },
  { "question": "Which sorting algorithm is not comparison-based?", "options": ["Merge Sort", "Quick Sort", "Counting Sort", "Heap Sort"], "answer": "Counting Sort" },
  { "question": "What is the primary advantage of using a linked list over an array?", "options": ["Faster access time", "Efficient memory usage", "Better for searching", "Lower storage cost"], "answer": "Efficient memory usage" },
  { "question": "Which data structure is best suited for implementing a priority queue?", "options": ["Array", "Linked List", "Heap", "Graph"], "answer": "Heap" },
  { "question": "What is the time complexity of finding the middle element in a singly linked list?", "options": ["O(1)", "O(n)", "O(log n)", "O(n^2)"], "answer": "O(n)" },
  { "question": "Which traversal method is used for DFS?", "options": ["Level Order", "Preorder", "Postorder", "Inorder"], "answer": "Preorder" }
],
    "medium": [
  { "question": "What is the time complexity of inserting an element in a binary search tree (BST) in the worst case?", "options": ["O(1)", "O(log n)", "O(n)", "O(n log n)"], "answer": "O(n)" },
  { "question": "Which data structure is used to implement a min-heap?", "options": ["Queue", "Stack", "Binary Heap", "Graph"], "answer": "Binary Heap" },
  { "question": "What is the auxiliary space complexity of Merge Sort?", "options": ["O(1)", "O(log n)", "O(n)", "O(n log n)"], "answer": "O(n)" },
  { "question": "Which of the following is not a stable sorting algorithm?", "options": ["Merge Sort", "Bubble Sort", "Quick Sort", "Insertion Sort"], "answer": "Quick Sort" },
  { "question": "Which traversal technique is used to serialize a binary tree?", "options": ["Inorder", "Preorder", "Postorder", "Level Order"], "answer": "Level Order" },
  { "question": "What is the best data structure for implementing an LRU Cache?", "options": ["Array", "Stack", "HashMap + Doubly Linked List", "Heap"], "answer": "HashMap + Doubly Linked List" },
  { "question": "Which algorithm is used to find the shortest path in a weighted graph?", "options": ["BFS", "DFS", "Dijkstra's Algorithm", "Bellman-Ford Algorithm"], "answer": "Dijkstra's Algorithm" },
  { "question": "Which of the following operations is not constant time (O(1)) in a hash table?", "options": ["Insertion", "Deletion", "Search", "Traversal"], "answer": "Traversal" },
  { "question": "Which of the following is the best sorting algorithm for large data sets?", "options": ["Bubble Sort", "Quick Sort", "Merge Sort", "Selection Sort"], "answer": "Merge Sort" },
  { "question": "What is the worst-case time complexity of searching in a balanced BST?", "options": ["O(n)", "O(log n)", "O(n log n)", "O(1)"], "answer": "O(log n)" },
  { "question": "Which algorithm is used to detect cycles in a directed graph?", "options": ["Dijkstra’s Algorithm", "Floyd-Warshall", "Kruskal’s Algorithm", "DFS with recursion stack"], "answer": "DFS with recursion stack" },
  { "question": "What is the advantage of using a circular linked list over a singly linked list?", "options": ["Faster traversal", "No NULL pointers", "Efficient memory usage", "Better for recursion"], "answer": "No NULL pointers" },
  { "question": "Which data structure is used in Kruskal’s algorithm?", "options": ["Heap", "Disjoint Set", "Queue", "Stack"], "answer": "Disjoint Set" },
  { "question": "What is the time complexity of heapify operation in a binary heap?", "options": ["O(1)", "O(n)", "O(log n)", "O(n log n)"], "answer": "O(log n)" },
  { "question": "Which of the following graph traversal techniques can be used to detect cycles in an undirected graph?", "options": ["BFS", "DFS", "Dijkstra’s Algorithm", "Floyd-Warshall"], "answer": "DFS" },
  { "question": "What is the amortized time complexity of inserting an element into a dynamic array?", "options": ["O(1)", "O(n)", "O(log n)", "O(n log n)"], "answer": "O(1)" },
  { "question": "Which data structure is used in implementing a trie?", "options": ["Graph", "Hash Map", "Heap", "Linked List"], "answer": "Hash Map" },
  { "question": "What is the space complexity of DFS in terms of number of vertices (V)?", "options": ["O(1)", "O(V)", "O(V + E)", "O(log V)"], "answer": "O(V)" },
  { "question": "Which of the following is used to implement priority queues?", "options": ["Queue", "Stack", "Heap", "Graph"], "answer": "Heap" },
  { "question": "Which data structure is used in Huffman coding?", "options": ["Stack", "Queue", "Binary Tree", "Heap"], "answer": "Heap" },
  { "question": "What is the purpose of the Floyd-Warshall algorithm?", "options": ["Finding MST", "Finding the shortest path between all pairs of nodes", "Detecting cycles in a graph", "Sorting"], "answer": "Finding the shortest path between all pairs of nodes" },
  { "question": "Which of the following techniques is used to handle collisions in hash tables?", "options": ["Binary Search", "Chaining", "Recursion", "Dynamic Programming"], "answer": "Chaining" },
  { "question": "Which algorithm is used in page replacement policies like LRU?", "options": ["Graph Traversal", "Queue Implementation", "Stack Implementation", "Hash Map + Doubly Linked List"], "answer": "Hash Map + Doubly Linked List" },
  { "question": "Which of the following searching algorithms performs better on a nearly sorted array?", "options": ["Binary Search", "Exponential Search", "Jump Search", "Interpolation Search"], "answer": "Exponential Search" },
  { "question": "Which of the following techniques is used in Dynamic Programming?", "options": ["Divide and Conquer", "Greedy Algorithm", "Memoization", "Recursion"], "answer": "Memoization" },
  { "question": "What is the worst-case time complexity of inserting a node into an AVL tree?", "options": ["O(1)", "O(n)", "O(log n)", "O(n log n)"], "answer": "O(log n)" },
  { "question": "Which of the following data structures is used to implement a graph?", "options": ["Adjacency Matrix", "Adjacency List", "Both", "None"], "answer": "Both" },
  { "question": "What is the main advantage of using a Red-Black tree over an AVL tree?", "options": ["Faster insertion and deletion", "More balanced structure", "Better for searching", "Uses less memory"], "answer": "Faster insertion and deletion" },
  { "question": "Which algorithm is used to find the strongly connected components in a graph?", "options": ["Dijkstra’s Algorithm", "Kruskal’s Algorithm", "Kosaraju’s Algorithm", "Floyd-Warshall"], "answer": "Kosaraju’s Algorithm" },
  { "question": "Which data structure is commonly used in AI for decision trees?", "options": ["Heap", "Graph", "Tree", "Queue"], "answer": "Tree" },
  { "question": "Which sorting algorithm is best when memory space is a constraint?", "options": ["Merge Sort", "Heap Sort", "Quick Sort", "Counting Sort"], "answer": "Quick Sort" },
  { "question": "What is the worst-case time complexity of finding the shortest path in a graph using Dijkstra’s algorithm?", "options": ["O(n)", "O(n log n)", "O(V + E log V)", "O(V^2)"], "answer": "O(V + E log V)" },
  { "question": "Which data structure is most efficient for implementing a Least Recently Used (LRU) Cache?", "options": ["Queue", "Stack", "Heap", "Hash Map + Doubly Linked List"], "answer": "Hash Map + Doubly Linked List" }
]
,
    "hard": [
  { "question": "What is the worst-case time complexity of the Floyd-Warshall algorithm?", "options": ["O(V+E)", "O(V log V)", "O(V^3)", "O(V^2)"], "answer": "O(V^3)" },
  { "question": "Which data structure is used in the A* search algorithm for pathfinding?", "options": ["Queue", "Stack", "Priority Queue", "Graph"], "answer": "Priority Queue" },
  { "question": "Which algorithm is used to find articulation points in a graph?", "options": ["Kruskal’s Algorithm", "Tarjan’s Algorithm", "Dijkstra’s Algorithm", "Bellman-Ford Algorithm"], "answer": "Tarjan’s Algorithm" },
  { "question": "What is the amortized time complexity of splay tree operations?", "options": ["O(n)", "O(log n)", "O(1)", "O(n log n)"], "answer": "O(log n)" },
  { "question": "What is the space complexity of the Bellman-Ford algorithm?", "options": ["O(V)", "O(E)", "O(V^2)", "O(V + E)"], "answer": "O(V)" },
  { "question": "Which data structure is used in implementing a Fibonacci Heap?", "options": ["Binary Heap", "Linked List", "Tree", "Graph"], "answer": "Linked List" },
  { "question": "What is the worst-case time complexity of inserting a node into a Red-Black tree?", "options": ["O(n)", "O(log n)", "O(1)", "O(n log n)"], "answer": "O(log n)" },
  { "question": "Which algorithm is used for finding bridges in a graph?", "options": ["Kosaraju’s Algorithm", "Tarjan’s Algorithm", "Dijkstra’s Algorithm", "Kruskal’s Algorithm"], "answer": "Tarjan’s Algorithm" },
  { "question": "What is the best-case time complexity of the QuickSort algorithm?", "options": ["O(n log n)", "O(n)", "O(n^2)", "O(1)"], "answer": "O(n log n)" },
  { "question": "Which data structure is used to efficiently find the lowest common ancestor (LCA) of two nodes in a tree?", "options": ["Binary Search Tree", "Segment Tree", "Sparse Table", "Trie"], "answer": "Sparse Table" },
  { "question": "Which algorithm is used to detect negative weight cycles in a graph?", "options": ["Dijkstra’s Algorithm", "Bellman-Ford Algorithm", "Floyd-Warshall Algorithm", "Kosaraju’s Algorithm"], "answer": "Bellman-Ford Algorithm" },
  { "question": "What is the expected time complexity of searching in a hash table with perfect hashing?", "options": ["O(1)", "O(log n)", "O(n)", "O(n log n)"], "answer": "O(1)" },
  { "question": "Which tree data structure supports O(1) insertion, deletion, and access in average cases?", "options": ["Trie", "AVL Tree", "Skip List", "Treap"], "answer": "Skip List" },
  { "question": "What is the best data structure for interval scheduling problems?", "options": ["Binary Search Tree", "Segment Tree", "Trie", "Hash Map"], "answer": "Segment Tree" },
  { "question": "Which data structure is used for the Union-Find algorithm?", "options": ["Heap", "Disjoint Set", "Queue", "Graph"], "answer": "Disjoint Set" },
  { "question": "What is the time complexity of finding an articulation point in a graph using Tarjan’s algorithm?", "options": ["O(V+E)", "O(V^2)", "O(log V)", "O(V log V)"], "answer": "O(V+E)" },
  { "question": "Which algorithm is used for optimizing matrix chain multiplication?", "options": ["Greedy Algorithm", "Dynamic Programming", "Divide and Conquer", "Backtracking"], "answer": "Dynamic Programming" },
  { "question": "Which of the following data structures is best for implementing a persistent array?", "options": ["Segment Tree", "Binary Indexed Tree", "Trie", "Hash Map"], "answer": "Segment Tree" },
  { "question": "What is the worst-case time complexity of the Boyer-Moore string search algorithm?", "options": ["O(n)", "O(m+n)", "O(m log n)", "O(n log m)"], "answer": "O(m+n)" },
  { "question": "Which data structure is best suited for range minimum queries (RMQ)?", "options": ["Trie", "Binary Indexed Tree", "Sparse Table", "Heap"], "answer": "Sparse Table" },
  { "question": "Which graph algorithm is used in Google's PageRank?", "options": ["Dijkstra’s Algorithm", "Bellman-Ford Algorithm", "Power Iteration", "Kruskal’s Algorithm"], "answer": "Power Iteration" },
  { "question": "Which sorting algorithm is used in the TimSort algorithm?", "options": ["Merge Sort", "Quick Sort", "Insertion Sort", "Heap Sort"], "answer": "Merge Sort" },
  { "question": "Which data structure is best suited for implementing an undo-redo functionality?", "options": ["Queue", "Stack", "Doubly Linked List", "Trie"], "answer": "Stack" },
  { "question": "Which graph traversal technique is best suited for topological sorting?", "options": ["BFS", "DFS", "Dijkstra’s Algorithm", "Kruskal’s Algorithm"], "answer": "DFS" },
  { "question": "What is the time complexity of the Rabin-Karp string matching algorithm in the worst case?", "options": ["O(n)", "O(m+n)", "O(n log m)", "O(m log n)"], "answer": "O(m+n)" },
  { "question": "Which data structure is used in the Ford-Fulkerson algorithm for max-flow problems?", "options": ["Graph", "Queue", "Stack", "Adjacency Matrix"], "answer": "Graph" },
  { "question": "Which of the following algorithms is used for approximate string matching?", "options": ["Knuth-Morris-Pratt", "Boyer-Moore", "Levenshtein Distance", "Rabin-Karp"], "answer": "Levenshtein Distance" },
  { "question": "What is the time complexity of finding the k-th smallest element in an unsorted array using QuickSelect?", "options": ["O(n log n)", "O(n)", "O(log n)", "O(n^2)"], "answer": "O(n)" },
  { "question": "Which of the following data structures is best for implementing a circular buffer?", "options": ["Array", "Doubly Linked List", "Queue", "Deque"], "answer": "Deque" },
  { "question": "Which data structure is used for implementing the Aho-Corasick string matching algorithm?", "options": ["Trie", "Hash Map", "Binary Indexed Tree", "Heap"], "answer": "Trie" },
  { "question": "Which tree data structure is used for implementing B-Trees in databases?", "options": ["AVL Tree", "Trie", "Red-Black Tree", "B+ Tree"], "answer": "B+ Tree" }
]

  }
  